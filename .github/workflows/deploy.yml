# Ozark Finances - Automated Deployment Pipeline
# GitHub Actions workflow for Raspberry Pi deployment
# Created: August 15, 2025

name: 🚀 Deploy to Raspberry Pi

# =============================================================================
# TRIGGER CONDITIONS
# =============================================================================
on:
  push:
    branches: [ Main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  
  pull_request:
    branches: [ Main ]
    types: [ closed ]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
env:
  REGISTRY: docker.io
  IMAGE_NAME: fastasfack/ozark-finances

# =============================================================================
# JOBS
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # JOB 1: Code Quality & Testing
  # ---------------------------------------------------------------------------
  test:
    name: 🧪 Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
    
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🧪 Run Tests
      run: |
        # Add basic tests here when available
        python -c "import app; print('✅ App imports successfully')"
        echo "✅ Basic validation passed"

  # ---------------------------------------------------------------------------
  # JOB 2: Build Docker Image
  # ---------------------------------------------------------------------------
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm/v7,linux/arm64
    
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🔨 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm/v7,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ---------------------------------------------------------------------------
  # JOB 3: Deploy to Raspberry Pi
  # ---------------------------------------------------------------------------
  deploy:
    name: 🍓 Deploy to Raspberry Pi
    runs-on: self-hosted  # Use Pi as runner instead of external server
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/Main'
    
    environment:
      name: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 📋 Create Deployment Script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🍓 Starting Raspberry Pi deployment..."
        
        # Create directories (use home directory to avoid sudo issues)
        mkdir -p $HOME/ozark-finances/{data,uploads,generated,logs,backups}
        
        # Copy current checkout to deployment directory
        echo "📥 Copying latest code to deployment directory..."
        rsync -av --delete $GITHUB_WORKSPACE/ $HOME/ozark-finances/ --exclude=data --exclude=uploads --exclude=generated --exclude=logs --exclude=backups
        
        # Navigate to app directory
        cd $HOME/ozark-finances || exit 1
        
        # Initialize database if it doesn't exist (run initialization script first)
        echo "🗄️ Ensuring database is initialized..."
        python docker_init.py || echo "ℹ️ Database initialization completed"
        
        # Log in to container registry
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
        # Pull latest image
        docker compose pull
        
        # Backup current data (if exists)
        if [ -f "docker-compose.yml" ]; then
          echo "📦 Creating backup..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          docker compose exec -T ozark-finances-app python -c "
          import shutil, os, datetime
          if os.path.exists('/app/data/ozark_finances.db'):
              shutil.copy('/app/data/ozark_finances.db', f'/app/data/ozark_finances.db.backup_{timestamp}')
              print(f'✅ Database backed up with timestamp {timestamp}')
          " || echo "ℹ️ No existing database to backup"
        fi
        
        # Stop existing containers
        docker compose down --remove-orphans || true
        
        # Clean up any conflicting networks more aggressively
        docker network prune -f || true
        docker network rm ozark-finances_ozark-network 2>/dev/null || true
        docker network rm ozark-finances_default 2>/dev/null || true
        
        # Start new containers
        docker compose up -d
        
        # Wait for health check
        echo "🔍 Waiting for application to be healthy..."
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker compose ps | grep -q "healthy"; then
            echo "✅ Application is healthy!"
            break
          fi
          sleep 2
          timeout=$((timeout-2))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Health check failed"
          docker compose logs
          exit 1
        fi
        
        # Cleanup old images
        docker image prune -f
        
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application available at: http://$(hostname -I | awk '{print $1}'):4999"
        EOF
        
        chmod +x deploy.sh
    
    - name: 🚀 Execute Deployment (Local)
      run: |
        # Since we're running on the Pi, deploy locally
        bash deploy.sh
    
    - name: 🧪 Post-Deployment Test
      run: |
        sleep 10
        curl -f http://localhost:4999/health || {
          echo "❌ Post-deployment health check failed"
          exit 1
        }
        echo "✅ Post-deployment health check passed"
    
    - name: 📊 Deployment Summary
      run: |
        echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: Raspberry Pi (${{ secrets.RASPBERRY_PI_HOST }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: http://${{ secrets.RASPBERRY_PI_HOST }}:4999" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        # Create single-line commit message format for VS Code terminal
        echo "📝 Suggested commit message for next changes:"
        echo "🚀 Deploy: Updated deployment pipeline | ✅ ARM builds working | 🐳 Docker Hub integration | 🍓 Pi deployment automated"

  # ---------------------------------------------------------------------------
  # JOB 4: Notification (Optional)
  # ---------------------------------------------------------------------------
  notify:
    name: 📢 Send Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📢 Deployment Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Ozark Finances deployed successfully to Raspberry Pi!"
        else
          echo "❌ Deployment failed. Check the logs above."
        fi
